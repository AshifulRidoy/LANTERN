# Dockerfile for Streamlit Frontend

# --- Build Stage ---
# Use a full Python image to build dependencies that might need compilation
FROM python:3.11-slim as builder

# Set working directory
WORKDIR /app

# Install build-time system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends build-essential git && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy requirements file and install dependencies into a virtual environment
# This improves isolation and keeps the final image clean
COPY requirements.txt .
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir -r requirements.txt


# --- Final Stage ---
# Use a slim base image for the final, smaller application image
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Create a non-root user for security
RUN useradd --create-home --shell /bin/bash appuser

# Copy the virtual environment from the builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy the application code
# This is done after dependencies to leverage Docker cache
COPY . .

# Create and set ownership for data/log directories and the app itself
RUN mkdir -p /app/data /app/logs && \
    chown -R appuser:appuser /app /app/data /app/logs

# Switch to the non-root user
USER appuser

# Set environment variables for runtime
ENV PYTHONUNBUFFERED=1
ENV PATH="/opt/venv/bin:$PATH"
ENV STREAMLIT_SERVER_PORT=8501
ENV STREAMLIT_SERVER_ADDRESS=0.0.0.0
ENV STREAMLIT_SERVER_HEADLESS=true
ENV STREAMLIT_BROWSER_GATHER_USAGE_STATS=false

# Expose the Streamlit port
EXPOSE 8501

# Health check to ensure the app is running
HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health || exit 1

# Command to run the application
CMD ["streamlit", "run", "streamlit_app.py"]
